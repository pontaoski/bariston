// Code generated by entc, DO NOT EDIT.

package ent

import (
	"baritone/ent/predicate"
	"baritone/ent/user"
	"baritone/ent/warning"
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// WarningUpdate is the builder for updating Warning entities.
type WarningUpdate struct {
	config
	hooks      []Hook
	mutation   *WarningMutation
	predicates []predicate.Warning
}

// Where adds a new predicate for the builder.
func (wu *WarningUpdate) Where(ps ...predicate.Warning) *WarningUpdate {
	wu.predicates = append(wu.predicates, ps...)
	return wu
}

// SetReason sets the reason field.
func (wu *WarningUpdate) SetReason(s string) *WarningUpdate {
	wu.mutation.SetReason(s)
	return wu
}

// SetDate sets the date field.
func (wu *WarningUpdate) SetDate(t time.Time) *WarningUpdate {
	wu.mutation.SetDate(t)
	return wu
}

// SetUserID sets the user edge to User by id.
func (wu *WarningUpdate) SetUserID(id uint64) *WarningUpdate {
	wu.mutation.SetUserID(id)
	return wu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (wu *WarningUpdate) SetNillableUserID(id *uint64) *WarningUpdate {
	if id != nil {
		wu = wu.SetUserID(*id)
	}
	return wu
}

// SetUser sets the user edge to User.
func (wu *WarningUpdate) SetUser(u *User) *WarningUpdate {
	return wu.SetUserID(u.ID)
}

// Mutation returns the WarningMutation object of the builder.
func (wu *WarningUpdate) Mutation() *WarningMutation {
	return wu.mutation
}

// ClearUser clears the user edge to User.
func (wu *WarningUpdate) ClearUser() *WarningUpdate {
	wu.mutation.ClearUser()
	return wu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wu *WarningUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarningMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarningUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarningUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarningUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WarningUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warning.Table,
			Columns: warning.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: warning.FieldID,
			},
		},
	}
	if ps := wu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: warning.FieldReason,
		})
	}
	if value, ok := wu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: warning.FieldDate,
		})
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.UserTable,
			Columns: []string{warning.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.UserTable,
			Columns: []string{warning.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warning.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WarningUpdateOne is the builder for updating a single Warning entity.
type WarningUpdateOne struct {
	config
	hooks    []Hook
	mutation *WarningMutation
}

// SetReason sets the reason field.
func (wuo *WarningUpdateOne) SetReason(s string) *WarningUpdateOne {
	wuo.mutation.SetReason(s)
	return wuo
}

// SetDate sets the date field.
func (wuo *WarningUpdateOne) SetDate(t time.Time) *WarningUpdateOne {
	wuo.mutation.SetDate(t)
	return wuo
}

// SetUserID sets the user edge to User by id.
func (wuo *WarningUpdateOne) SetUserID(id uint64) *WarningUpdateOne {
	wuo.mutation.SetUserID(id)
	return wuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (wuo *WarningUpdateOne) SetNillableUserID(id *uint64) *WarningUpdateOne {
	if id != nil {
		wuo = wuo.SetUserID(*id)
	}
	return wuo
}

// SetUser sets the user edge to User.
func (wuo *WarningUpdateOne) SetUser(u *User) *WarningUpdateOne {
	return wuo.SetUserID(u.ID)
}

// Mutation returns the WarningMutation object of the builder.
func (wuo *WarningUpdateOne) Mutation() *WarningMutation {
	return wuo.mutation
}

// ClearUser clears the user edge to User.
func (wuo *WarningUpdateOne) ClearUser() *WarningUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// Save executes the query and returns the updated entity.
func (wuo *WarningUpdateOne) Save(ctx context.Context) (*Warning, error) {

	var (
		err  error
		node *Warning
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarningMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarningUpdateOne) SaveX(ctx context.Context) *Warning {
	w, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return w
}

// Exec executes the query on the entity.
func (wuo *WarningUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarningUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WarningUpdateOne) sqlSave(ctx context.Context) (w *Warning, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warning.Table,
			Columns: warning.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: warning.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Warning.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: warning.FieldReason,
		})
	}
	if value, ok := wuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: warning.FieldDate,
		})
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.UserTable,
			Columns: []string{warning.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.UserTable,
			Columns: []string{warning.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	w = &Warning{config: wuo.config}
	_spec.Assign = w.assignValues
	_spec.ScanValues = w.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warning.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return w, nil
}
