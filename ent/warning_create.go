// Code generated by entc, DO NOT EDIT.

package ent

import (
	"baritone/ent/guild"
	"baritone/ent/user"
	"baritone/ent/warning"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/diamondburned/arikawa/discord"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// WarningCreate is the builder for creating a Warning entity.
type WarningCreate struct {
	config
	mutation *WarningMutation
	hooks    []Hook
}

// SetReason sets the reason field.
func (wc *WarningCreate) SetReason(s string) *WarningCreate {
	wc.mutation.SetReason(s)
	return wc
}

// SetDate sets the date field.
func (wc *WarningCreate) SetDate(t time.Time) *WarningCreate {
	wc.mutation.SetDate(t)
	return wc
}

// SetUserID sets the user edge to User by id.
func (wc *WarningCreate) SetUserID(id discord.UserID) *WarningCreate {
	wc.mutation.SetUserID(id)
	return wc
}

// SetUser sets the user edge to User.
func (wc *WarningCreate) SetUser(u *User) *WarningCreate {
	return wc.SetUserID(u.ID)
}

// SetIssuedByID sets the issuedBy edge to User by id.
func (wc *WarningCreate) SetIssuedByID(id discord.UserID) *WarningCreate {
	wc.mutation.SetIssuedByID(id)
	return wc
}

// SetIssuedBy sets the issuedBy edge to User.
func (wc *WarningCreate) SetIssuedBy(u *User) *WarningCreate {
	return wc.SetIssuedByID(u.ID)
}

// SetGuildID sets the guild edge to Guild by id.
func (wc *WarningCreate) SetGuildID(id discord.GuildID) *WarningCreate {
	wc.mutation.SetGuildID(id)
	return wc
}

// SetGuild sets the guild edge to Guild.
func (wc *WarningCreate) SetGuild(g *Guild) *WarningCreate {
	return wc.SetGuildID(g.ID)
}

// Mutation returns the WarningMutation object of the builder.
func (wc *WarningCreate) Mutation() *WarningMutation {
	return wc.mutation
}

// Save creates the Warning in the database.
func (wc *WarningCreate) Save(ctx context.Context) (*Warning, error) {
	var (
		err  error
		node *Warning
	)
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarningMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WarningCreate) SaveX(ctx context.Context) *Warning {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (wc *WarningCreate) check() error {
	if _, ok := wc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := wc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := wc.mutation.IssuedByID(); !ok {
		return &ValidationError{Name: "issuedBy", err: errors.New("ent: missing required edge \"issuedBy\"")}
	}
	if _, ok := wc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild", err: errors.New("ent: missing required edge \"guild\"")}
	}
	return nil
}

func (wc *WarningCreate) sqlSave(ctx context.Context) (*Warning, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WarningCreate) createSpec() (*Warning, *sqlgraph.CreateSpec) {
	var (
		_node = &Warning{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: warning.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: warning.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: warning.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := wc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: warning.FieldDate,
		})
		_node.Date = value
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.UserTable,
			Columns: []string{warning.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.IssuedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.IssuedByTable,
			Columns: []string{warning.IssuedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warning.GuildTable,
			Columns: []string{warning.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WarningCreateBulk is the builder for creating a bulk of Warning entities.
type WarningCreateBulk struct {
	config
	builders []*WarningCreate
}

// Save creates the Warning entities in the database.
func (wcb *WarningCreateBulk) Save(ctx context.Context) ([]*Warning, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Warning, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarningMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (wcb *WarningCreateBulk) SaveX(ctx context.Context) []*Warning {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
