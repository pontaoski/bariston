// Code generated by entc, DO NOT EDIT.

package ent

import (
	"baritone/ent/user"
	"baritone/ent/warning"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Warning is the model entity for the Warning schema.
type Warning struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarningQuery when eager-loading is set.
	Edges          WarningEdges `json:"edges"`
	guild_warnings *int
	warning_user   *uint64
}

// WarningEdges holds the relations/edges for other nodes in the graph.
type WarningEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarningEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warning) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // reason
		&sql.NullTime{},   // date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Warning) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // guild_warnings
		&sql.NullInt64{}, // warning_user
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warning fields.
func (w *Warning) assignValues(values ...interface{}) error {
	if m, n := len(values), len(warning.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	w.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reason", values[0])
	} else if value.Valid {
		w.Reason = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[1])
	} else if value.Valid {
		w.Date = value.Time
	}
	values = values[2:]
	if len(values) == len(warning.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field guild_warnings", value)
		} else if value.Valid {
			w.guild_warnings = new(int)
			*w.guild_warnings = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field warning_user", value)
		} else if value.Valid {
			w.warning_user = new(uint64)
			*w.warning_user = uint64(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Warning.
func (w *Warning) QueryUser() *UserQuery {
	return (&WarningClient{config: w.config}).QueryUser(w)
}

// Update returns a builder for updating this Warning.
// Note that, you need to call Warning.Unwrap() before calling this method, if this Warning
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warning) Update() *WarningUpdateOne {
	return (&WarningClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (w *Warning) Unwrap() *Warning {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Warning is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warning) String() string {
	var builder strings.Builder
	builder.WriteString("Warning(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", reason=")
	builder.WriteString(w.Reason)
	builder.WriteString(", date=")
	builder.WriteString(w.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Warnings is a parsable slice of Warning.
type Warnings []*Warning

func (w Warnings) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
